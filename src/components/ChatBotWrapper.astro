---
// ChatBotWrapper.astro - Wrapper para integrar o ChatBot em vanilla JS
---

<div id="chatbot-container"></div>

<script>
  // Implementação do chatbot flutuante em vanilla JavaScript
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('chatbot-container');
    if (!container) return;

    // Estado do chatbot
    let isOpen = false;
    let isExpanded = false;
    let messages = [];
    let isLoading = false;

    // Função para renderizar o chatbot
    function renderChatbot() {
      const chatbotHTML = `
        <!-- Caixa de texto simples quando não expandido -->
        <div class="${isOpen ? 'hidden' : 'block'} fixed bottom-20 right-6 z-50">
          <div class="bg-white rounded-lg shadow-lg border border-gray-200 p-4 w-80">
            <div class="flex gap-2">
              <input
                type="text"
                placeholder="Type your message..."
                class="flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                onclick="toggleChat()"
                readonly
              />
              <button onclick="toggleChat()" class="bg-blue-600 hover:bg-blue-700 text-white p-2 rounded-lg transition-colors">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                </svg>
              </button>
            </div>
          </div>
        </div>

        <!-- Janela do chat -->
        <div class="${isOpen ? 'block' : 'hidden'} fixed bottom-20 right-6 w-96 h-[32rem] bg-white rounded-2xl shadow-2xl border border-gray-200 overflow-hidden z-50 flex flex-col">
          <!-- Header -->
          <div class="bg-gradient-to-r from-blue-600 to-blue-800 text-white p-4 flex items-center justify-between">
            <div class="flex items-center space-x-3">
              <div class="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                </svg>
              </div>
              <div>
                <h3 class="font-semibold">AI Assistant</h3>
                <p class="text-xs opacity-90">Bubbles Enterprise</p>
              </div>
            </div>
            <button onclick="toggleChat()" class="p-2 hover:bg-white/20 rounded-lg transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          <!-- Mensagens -->
          <div class="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50" id="chat-messages-container">
            ${renderChatMessages()}
          </div>

          <!-- Input -->
          <div class="p-4 border-t border-gray-200 bg-white">
            <div class="flex gap-2">
              <textarea
                id="chat-message-input"
                placeholder="Type your message..."
                class="flex-1 p-2 border border-gray-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
                rows="2"
                ${isLoading ? 'disabled' : ''}
              ></textarea>
              <button
                onclick="sendChatMessage()"
                class="bg-blue-600 hover:bg-blue-700 text-white p-2 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                ${isLoading ? 'disabled' : ''}
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      `;

      container.innerHTML = chatbotHTML;
      
      // Adicionar event listener para Enter no textarea
      const textarea = document.getElementById('chat-message-input');
      if (textarea) {
        textarea.addEventListener('keypress', (e) => {
          if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendChatMessage();
          }
        });
      }
    }

    // Função para renderizar mensagens do chat
    function renderChatMessages() {
      if (messages.length === 0) {
        return `
          <div class="text-center text-gray-500 mt-8">
            <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
              </svg>
            </div>
            <h3 class="font-semibold text-gray-700 mb-2">Hello! I'm your AI assistant</h3>
            <p class="text-sm text-gray-500">How can I help you with your soffit and fascia project today?</p>
          </div>
        `;
      }
      
      let messagesHTML = '';
      
      messages.forEach((message) => {
        const isUser = message.role === 'user';
        messagesHTML += `
          <div class="flex ${isUser ? 'justify-end' : 'justify-start'}">
            <div class="max-w-[80%] p-3 rounded-lg ${
              isUser
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-800'
            }">
              <p class="text-sm whitespace-pre-wrap">${message.content}</p>
              <span class="text-xs opacity-70 mt-1 block">
                ${message.timestamp.toLocaleTimeString('en-US', {
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </span>
            </div>
          </div>
        `;
      });

      if (isLoading) {
        messagesHTML += `
          <div class="flex justify-start">
            <div class="bg-gray-100 p-3 rounded-lg">
              <div class="flex items-center space-x-2">
                <div class="flex space-x-1">
                  <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
                  <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                </div>
                <span class="text-sm text-gray-500">Typing...</span>
              </div>
            </div>
          </div>
        `;
      }

      return messagesHTML;
    }

    // Função para alternar chat
    window.toggleChat = function() {
      isOpen = !isOpen;
      renderChatbot();
    };

    // Função para enviar mensagem do chat
    window.sendChatMessage = async function() {
      const textarea = document.getElementById('chat-message-input');
      const inputMessage = textarea?.value.trim();
      
      if (!inputMessage || isLoading) return;

      // Adicionar mensagem do usuário
      const userMessage = {
        id: Date.now().toString(),
        role: 'user',
        content: inputMessage,
        timestamp: new Date()
      };

      messages.push(userMessage);
      textarea.value = '';
      isLoading = true;
      
      // Re-renderizar para mostrar a mensagem do usuário e loading
      const messagesContainer = document.getElementById('chat-messages-container');
      if (messagesContainer) {
        messagesContainer.innerHTML = renderChatMessages();
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }

      try {
        const response = await fetch('/api/chat', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            message: inputMessage,
            conversationHistory: messages.slice(0, -1).map(msg => ({
              role: msg.role,
              content: msg.content
            }))
          })
        });

        const data = await response.json();

        if (data.success) {
          const assistantMessage = {
            id: (Date.now() + 1).toString(),
            role: 'assistant',
            content: data.message,
            timestamp: new Date()
          };
          messages.push(assistantMessage);
        } else {
          throw new Error(data.error);
        }
      } catch (error) {
        const errorMessage = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: 'Desculpe, ocorreu um erro. Tente novamente em alguns instantes.',
          timestamp: new Date()
        };
        messages.push(errorMessage);
      } finally {
        isLoading = false;
        
        // Re-renderizar para mostrar a resposta
        const messagesContainer = document.getElementById('chat-messages-container');
        if (messagesContainer) {
          messagesContainer.innerHTML = renderChatMessages();
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        // Re-habilitar textarea
        const newTextarea = document.getElementById('chat-message-input');
        if (newTextarea) {
          newTextarea.disabled = false;
          newTextarea.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
              e.preventDefault();
              sendChatMessage();
            }
          });
        }
      }
    };

    // Renderizar chatbot inicial
    renderChatbot();
  });
</script>

<style>
  #chatbot-container {
    position: fixed;
    bottom: 0;
    right: 0;
    z-index: 1000;
  }
</style>