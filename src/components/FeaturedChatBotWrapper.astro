---
// Wrapper para o chatbot em destaque - vers√£o vertical simples como Grok
---

<div id="featured-chatbot-container" class="w-full max-w-2xl mx-auto">
  <div id="featured-chatbot-mount"></div>
</div>

<script>
  // Implementa√ß√£o do chatbot em vanilla JavaScript
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('featured-chatbot-mount');
    if (!container) return;

    // Estado do chatbot
    let messages = [];
    let isLoading = false;
    let isExpanded = false;
    let sessionId = null;

    // Fun√ß√£o para gerar ID √∫nico da sess√£o no formato B9625001 (B + M√™s + Dia + Ano + N√∫mero sequencial)
    function generateSessionId() {
      const now = new Date();
      const month = String(now.getMonth() + 1).padStart(2, '0');
      const day = String(now.getDate()).padStart(2, '0');
      const year = String(now.getFullYear()).slice(-2);
      const sequence = String(Math.floor(Math.random() * 999) + 1).padStart(3, '0');
      
      return `B${month}${day}${year}${sequence}`;
    }

    // Fun√ß√£o para salvar conversa no localStorage e banco de dados
    async function saveConversation() {
      if (!sessionId) {
        sessionId = generateSessionId();
      }
      
      const conversationData = {
        sessionId: sessionId,
        messages: messages,
        isExpanded: isExpanded,
        timestamp: new Date().toISOString(),
        lastActivity: Date.now()
      };
      
      try {
        // Salvar no localStorage
        localStorage.setItem('bubbles_chat_session', JSON.stringify(conversationData));
        console.log('üíæ Conversa salva automaticamente');
        
        // Salvar no banco de dados
        if (messages.length > 0) {
          try {
            const response = await fetch('/api/chat/save-conversation', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                sessionId: sessionId,
                messages: messages,
                isExpanded: isExpanded,
                timestamp: new Date().toISOString()
              })
            });
            
            if (response.ok) {
              const result = await response.json();
              if (result.success) {
                console.log('üíæ Conversa salva no banco de dados');
              }
            } else {
              console.warn('Failed to save conversation to database');
            }
          } catch (error) {
            console.warn('Error saving conversation to database:', error);
          }
        }
      } catch (error) {
        console.error('Erro ao salvar conversa:', error);
      }
    }

    // Fun√ß√£o para carregar conversa do localStorage
    function loadConversation() {
      try {
        const savedData = localStorage.getItem('bubbles_chat_session');
        if (savedData) {
          const conversationData = JSON.parse(savedData);
          
          // Verificar se a conversa n√£o √© muito antiga (24 horas)
          const maxAge = 24 * 60 * 60 * 1000; // 24 horas em ms
          const age = Date.now() - conversationData.lastActivity;
          
          if (age < maxAge && conversationData.messages && conversationData.messages.length > 0) {
            messages = conversationData.messages.map(msg => ({
              ...msg,
              timestamp: new Date(msg.timestamp)
            }));
            isExpanded = conversationData.isExpanded || false;
            sessionId = conversationData.sessionId;
            console.log('üîÑ Conversa anterior recuperada:', messages.length, 'mensagens');
            return true;
          }
        }
      } catch (error) {
        console.error('Erro ao carregar conversa:', error);
      }
      return false;
    }

    // Fun√ß√£o para limpar conversa salva
    function clearSavedConversation() {
      try {
        localStorage.removeItem('bubbles_chat_session');
        console.log('üóëÔ∏è Conversa limpa do localStorage');
      } catch (error) {
        console.error('Erro ao limpar conversa:', error);
      }
    }

    // Fun√ß√£o para renderizar o chatbot
    function renderChatbot() {
      if (!isExpanded) {
        const chatbotHTML = `
          <div class="bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden">
            <!-- Header minimalizado -->
            <div class="bg-gradient-to-r from-blue-600 to-blue-800 p-6 text-center">
              <h2 class="text-2xl font-bold text-white mb-2">Get Quote in Seconds</h2>
              <p class="text-blue-100 text-lg">Tell us what you need!</p>
            </div>
            
            <!-- Input simples -->
            <div class="p-6 bg-white">
              <div class="flex gap-3">
                <input
                  type="text"
                  id="simple-input"
                  placeholder="Describe your soffit project..."
                  class="flex-1 p-4 border-2 border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-lg"
                  onkeypress="handleSimpleInputKeyPress(event)"
                />
                <button
                  onclick="sendSimpleMessage()"
                  class="bg-gradient-to-r from-blue-600 to-blue-800 hover:from-blue-700 hover:to-blue-900 text-white p-4 rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl flex items-center justify-center min-w-[60px]"
                >
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                  </svg>
                </button>
              </div>
              <p class="text-sm text-gray-500 mt-3 text-center">
                üí° Example: "I need to replace vinyl soffit on my 150 sqft house"
              </p>
            </div>
          </div>
        `;
        container.innerHTML = chatbotHTML;
        return;
      }
      
      const chatbotHTML = `
        <div class="bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden">
          <!-- Header expandido -->
          <div class="bg-gradient-to-r from-blue-600 to-blue-800 p-6 text-center relative">
            <!-- Bot√µes do header -->
            <div class="absolute top-4 right-4 flex gap-2">
              <button onclick="clearChat()" class="text-white hover:text-red-200 transition-colors" title="Limpar conversa">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </button>
              <button onclick="minimizeChat()" class="text-white hover:text-gray-200 transition-colors" title="Minimizar chat">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </button>
            </div>
            
            <!-- Indicador de salvamento -->
            <div class="absolute top-4 left-4 flex items-center gap-2">
              <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse" title="Conversa salva automaticamente"></div>
              <span class="text-xs text-blue-100">Auto-save</span>
            </div>
            
            <h2 class="text-2xl font-bold text-white mb-2">Get Quote in Seconds</h2>
            <p class="text-blue-100 text-lg">Tell us what you need!</p>
            
            <!-- Status da conversa -->
            ${messages.length > 0 ? `
              <div class="mt-2">
                <span class="text-xs text-blue-200">${messages.length} mensagem${messages.length > 1 ? 's' : ''} ‚Ä¢ Conversa salva</span>
              </div>
            ` : ''}
          </div>

          <!-- √Årea de mensagens -->
          <div class="min-h-[400px] max-h-[500px] overflow-y-auto p-6 bg-gray-50" id="messages-container">
            ${messages.length === 0 ? `
              <div class="text-center text-gray-500 mt-20">
                <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                </svg>
                <p class="text-lg font-medium mb-2">Ready to help!</p>
                <p class="text-sm">Ask your question about aluminum or vinyl soffit</p>
              </div>
            ` : renderMessages()}
          </div>

          <!-- Input Area -->
          <div class="p-6 bg-white border-t border-gray-200">
            <div class="flex gap-3">
              <textarea
                id="message-input"
                placeholder="Describe your soffit project..."
                class="flex-1 p-4 border-2 border-gray-300 rounded-xl resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-lg"
                rows="3"
                ${isLoading ? 'disabled' : ''}
              ></textarea>
              <button
                onclick="sendMessage()"
                class="bg-gradient-to-r from-blue-600 to-blue-800 hover:from-blue-700 hover:to-blue-900 text-white p-4 rounded-xl disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-lg hover:shadow-xl flex items-center justify-center min-w-[60px]"
                ${isLoading ? 'disabled' : ''}
              >
                ${isLoading ? `
                  <svg class="animate-spin w-6 h-6" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                ` : `
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                  </svg>
                `}
              </button>
            </div>
            <p class="text-sm text-gray-500 mt-3 text-center">
              üí° Example: "I need to replace vinyl soffit on my 150 sqft house"
            </p>
          </div>
        </div>
      `;

      container.innerHTML = chatbotHTML;
      
      // Adicionar event listener para Enter no textarea
      const textarea = document.getElementById('message-input');
      if (textarea) {
        textarea.addEventListener('keypress', (e) => {
          if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
          }
        });
      }
    }

    // Fun√ß√£o para renderizar mensagens
    function renderMessages() {
      let messagesHTML = '';
      
      messages.forEach((message) => {
        const isUser = (message.role === 'user' || message.type === 'user');
        messagesHTML += `
          <div class="flex ${isUser ? 'justify-end' : 'justify-start'}">
            <div class="max-w-[85%] p-3 rounded-lg ${
              isUser
                ? 'bg-blue-600 text-white'
                : 'bg-white text-gray-800 shadow-sm border'
            }">
              <p class="text-sm whitespace-pre-wrap">${message.content}</p>
              <span class="text-xs opacity-70 mt-1 block">
                ${message.timestamp.toLocaleTimeString('en-US', {
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </span>
            </div>
          </div>
        `;
      });

      if (isLoading) {
        messagesHTML += `
          <div class="flex justify-start">
            <div class="bg-white p-3 rounded-lg shadow-sm border">
              <div class="flex space-x-1">
                <div class="w-2 h-2 bg-blue-600 rounded-full animate-bounce"></div>
                <div class="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
                <div class="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
              </div>
            </div>
          </div>
        `;
      }

      return messagesHTML;
    }

    // Fun√ß√£o para enviar mensagem para a API
    async function sendMessageToAPI(inputMessage) {
      isLoading = true;
      
      // Re-renderizar para mostrar loading
      const messagesContainer = document.getElementById('messages-container');
      if (messagesContainer) {
        messagesContainer.innerHTML = renderMessages();
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }

      try {
        const response = await fetch('/api/chat', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            message: inputMessage,
            conversationHistory: messages.slice(0, -1).map(msg => ({
              role: msg.role || msg.type,
              content: msg.content
            }))
          })
        });

        const data = await response.json();

        if (data.success) {
          const assistantMessage = {
            type: 'assistant',
            content: data.message,
            timestamp: new Date()
          };
          messages.push(assistantMessage);
          
          // Salvar conversa ap√≥s receber resposta da API
          saveConversation();
        } else {
          throw new Error(data.error);
        }
      } catch (error) {
        const errorMessage = {
          type: 'assistant',
          content: 'Sorry, an error occurred. Please try again in a few moments.',
          timestamp: new Date()
        };
        messages.push(errorMessage);
        
        // Salvar conversa mesmo em caso de erro
        saveConversation();
      } finally {
        isLoading = false;
        
        // Re-renderizar para mostrar a resposta
        const messagesContainer = document.getElementById('messages-container');
        if (messagesContainer) {
          messagesContainer.innerHTML = renderMessages();
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        // Re-habilitar textarea se existir
        const textarea = document.getElementById('message-input');
        if (textarea) {
          textarea.disabled = false;
        }
      }
    }

    // Fun√ß√£o principal para enviar mensagem
    window.sendMessage = async function() {
      const textarea = document.getElementById('message-input');
      if (!textarea) return;
      
      const inputMessage = textarea.value.trim();
      
      if (!inputMessage || isLoading) return;

      // Adicionar mensagem do usu√°rio
      const userMessage = {
        type: 'user',
        content: inputMessage,
        timestamp: new Date()
      };

      messages.push(userMessage);
      textarea.value = '';
      
      // Salvar conversa ap√≥s adicionar mensagem do usu√°rio
      saveConversation();
      
      // Enviar para API
      await sendMessageToAPI(inputMessage);
      
      // Re-adicionar event listener
      setTimeout(() => {
        const newTextarea = document.getElementById('message-input');
        if (newTextarea) {
          newTextarea.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
              e.preventDefault();
              sendMessage();
            }
          });
        }
      }, 100);
    };

    // Fun√ß√£o para lidar com Enter no input simples
    window.handleSimpleInputKeyPress = function(event) {
      if (event.key === 'Enter') {
        event.preventDefault();
        sendSimpleMessage();
      }
    };

    // Fun√ß√£o para enviar mensagem do input simples
    window.sendSimpleMessage = function() {
      const input = document.getElementById('simple-input');
      if (!input || !input.value.trim()) return;
      
      const message = input.value.trim();
      input.value = '';
      
      // Expandir o chat e enviar a mensagem
      isExpanded = true;
      messages.push({
        type: 'user',
        content: message,
        timestamp: new Date()
      });
      
      // Salvar conversa ap√≥s adicionar mensagem
      saveConversation();
      
      renderChatbot();
      
      // Enviar mensagem para a API
      sendMessageToAPI(message);
    };

    // Fun√ß√£o para expandir o chat
    window.expandChat = function() {
      isExpanded = true;
      renderChatbot();
      // Focar no textarea ap√≥s expandir
      setTimeout(() => {
        const textarea = document.getElementById('message-input');
        if (textarea) {
          textarea.focus();
        }
      }, 100);
    };

    // Fun√ß√£o para minimizar o chat
    window.minimizeChat = function() {
      isExpanded = false;
      // N√£o limpar mensagens - manter conversa salva
      saveConversation();
      renderChatbot();
    };

    // Fun√ß√£o para limpar conversa manualmente
    window.clearChat = function() {
      if (confirm('Tem certeza que deseja limpar toda a conversa? Esta a√ß√£o n√£o pode ser desfeita.')) {
        messages = [];
        isExpanded = false;
        clearSavedConversation();
        renderChatbot();
      }
    };

    // Carregar conversa salva ao inicializar
    const conversationLoaded = loadConversation();
    
    if (conversationLoaded) {
      console.log('‚úÖ Conversa anterior recuperada com sucesso!');
    }
    
    // Renderizar chatbot inicial
    renderChatbot();
  });
</script>