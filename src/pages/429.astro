---
import BaseLayout from '../layouts/BaseLayout.astro';

// Security headers for error pages
Astro.response.headers.set('X-Content-Type-Options', 'nosniff');
Astro.response.headers.set('X-Frame-Options', 'DENY');
Astro.response.headers.set('X-XSS-Protection', '1; mode=block');
Astro.response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
Astro.response.headers.set('Content-Security-Policy', "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self';");
Astro.response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
Astro.response.headers.set('Retry-After', '60'); // Suggest retry after 60 seconds

// Set proper status code
Astro.response.status = 429;
---

<BaseLayout 
  title="429 - Too Many Requests | Bubbles Enterprise"
  description="You have sent too many requests in a given amount of time. Please wait before making more requests."
>
  <meta name="retry-after" content="60" slot="head" />
  <main class="min-h-screen bg-gradient-to-br from-red-500/5 via-white to-orange-500/5 flex items-center justify-center px-4">
    <div class="max-w-2xl mx-auto text-center">
      <!-- Error Icon -->
      <div class="mb-8">
        <div class="w-32 h-32 mx-auto bg-gradient-to-br from-red-500 to-orange-600 rounded-full flex items-center justify-center shadow-2xl animate-pulse-glow">
          <svg class="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
      </div>

      <!-- Error Content -->
      <div class="glass-hover rounded-3xl p-8 mb-8">
        <h1 class="text-6xl font-display font-bold text-red-600 mb-4">429</h1>
        <h2 class="text-3xl font-display font-semibold text-neutral-gray-800 mb-4">Too Many Requests</h2>
        <p class="text-lg text-neutral-gray-600 mb-6 leading-relaxed">
          You have sent too many requests in a given amount of time. 
          Please wait a moment before making additional requests.
        </p>
        
        <!-- Security Notice -->
        <div class="bg-red-50 border border-red-200 rounded-2xl p-4 mb-6">
          <div class="flex items-center space-x-2">
            <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
            <p class="text-sm text-red-800 font-medium">Rate Limit Protection</p>
          </div>
          <p class="text-sm text-red-700 mt-2">
            This limit protects our servers from abuse and ensures fair usage for all users.
          </p>
        </div>

        <!-- Rate Limit Info -->
        <div class="bg-blue-50 border border-blue-200 rounded-2xl p-4 mb-6">
          <h3 class="text-sm font-semibold text-blue-800 mb-3">Current Rate Limits:</h3>
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 text-sm">
            <div class="flex justify-between items-center">
              <span class="text-blue-700">API Requests:</span>
              <span class="font-medium text-blue-800">100/hour</span>
            </div>
            <div class="flex justify-between items-center">
              <span class="text-blue-700">File Uploads:</span>
              <span class="font-medium text-blue-800">20/hour</span>
            </div>
            <div class="flex justify-between items-center">
              <span class="text-blue-700">Search Queries:</span>
              <span class="font-medium text-blue-800">200/hour</span>
            </div>
            <div class="flex justify-between items-center">
              <span class="text-blue-700">Login Attempts:</span>
              <span class="font-medium text-blue-800">5/15min</span>
            </div>
          </div>
        </div>

        <!-- Countdown Timer -->
        <div class="bg-yellow-50 border border-yellow-200 rounded-2xl p-4 mb-6">
          <div class="flex items-center justify-center space-x-2 mb-2">
            <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <p class="text-sm text-yellow-800 font-medium">Retry Available In:</p>
          </div>
          <div id="countdown" class="text-2xl font-bold text-yellow-800">01:00</div>
        </div>

        <!-- Action Buttons -->
        <div class="flex flex-col sm:flex-row gap-4 justify-center mb-6">
          <a href="/" class="btn-primary inline-flex items-center space-x-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
            </svg>
            <span>Return Home</span>
          </a>
          <button id="retry-btn" disabled class="btn-secondary inline-flex items-center space-x-2 opacity-50 cursor-not-allowed">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            <span>Retry Request</span>
          </button>
        </div>
      </div>

      <!-- Tips -->
      <div class="text-center">
        <h3 class="text-xl font-display font-semibold text-neutral-gray-800 mb-4">How to Avoid Rate Limits</h3>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="glass-hover rounded-2xl p-4">
            <svg class="w-8 h-8 text-bubble-primary mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <h4 class="font-semibold text-neutral-gray-800 mb-2">Pace Your Requests</h4>
            <p class="text-sm text-neutral-gray-600">Add delays between API calls and avoid rapid-fire requests.</p>
          </div>
          
          <div class="glass-hover rounded-2xl p-4">
            <svg class="w-8 h-8 text-bubble-primary mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z"></path>
            </svg>
            <h4 class="font-semibold text-neutral-gray-800 mb-2">Use Caching</h4>
            <p class="text-sm text-neutral-gray-600">Cache responses locally to reduce the number of API calls needed.</p>
          </div>
          
          <div class="glass-hover rounded-2xl p-4">
            <svg class="w-8 h-8 text-bubble-primary mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
            <h4 class="font-semibold text-neutral-gray-800 mb-2">Upgrade Plan</h4>
            <p class="text-sm text-neutral-gray-600">Contact us at (407) 715-1790 for higher rate limits.</p>
          </div>
        </div>
      </div>
    </div>
  </main>
</BaseLayout>

<script>
  // Security: Log rate limit hit for monitoring
  console.warn('429 Too Many Requests - Rate limit exceeded');
  
  // Security: Extract retry time dynamically from server response
  let timeLeft = 60; // Default fallback
  let countdownInterval; // Declare interval variable
  const countdownElement = document.getElementById('countdown');
  const retryButton = document.getElementById('retry-btn');
  
  // Function to get Retry-After header from server-side rendered data
  function getRetryAfterTime() {
    try {
      // Try to get from meta tag first (server-side rendered)
      const metaRetryAfter = document.querySelector('meta[name="retry-after"]');
      if (metaRetryAfter) {
        const retrySeconds = parseInt(metaRetryAfter.content);
        if (!isNaN(retrySeconds) && retrySeconds > 0) {
          return retrySeconds;
        }
      }
      
      // Fallback: try to extract from response headers if available
      const performanceEntries = performance.getEntriesByType('navigation');
      if (performanceEntries.length > 0) {
        const entry = performanceEntries[0];
        // Use response timing to estimate retry time
        const responseTime = entry.responseEnd - entry.responseStart;
        if (responseTime > 1000) { // If response took more than 1s, likely rate limited
          return 60; // Default rate limit time
        }
      }
    } catch (error) {
      console.warn('Could not determine retry time:', error);
    }
    return 60; // Default fallback
  }
  
  // Initialize countdown with dynamic time
  function initializeCountdown() {
    timeLeft = getRetryAfterTime();
    console.log(`Rate limit countdown initialized: ${timeLeft} seconds`);
    countdownInterval = setInterval(updateCountdown, 1000);
  }
  
  function updateCountdown() {
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    countdownElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    if (timeLeft <= 0) {
      countdownElement.textContent = '00:00';
      retryButton.disabled = false;
      retryButton.classList.remove('opacity-50', 'cursor-not-allowed');
      retryButton.classList.add('hover:bg-bubble-secondary');
      clearInterval(countdownInterval);
    } else {
      timeLeft--;
    }
  }
  
  // Start the countdown
  initializeCountdown();
  updateCountdown(); // Initial call
  
  // Security: Clear any pending requests to prevent further rate limiting
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.getRegistrations().then(registrations => {
      registrations.forEach(registration => {
        // Cancel any pending requests
        if (registration.active) {
          registration.active.postMessage({ action: 'cancelPendingRequests' });
        }
      });
    });
  }
  
  // Security: Clear request queues and caches
  if ('caches' in window) {
    caches.keys().then(names => {
      names.forEach(name => {
        if (name.includes('api') || name.includes('request')) {
          caches.delete(name);
        }
      });
    });
  }
  
  // Security: Store rate limit timestamp
  try {
    const rateLimitTime = Date.now();
    localStorage.setItem('rateLimitTime', rateLimitTime.toString());
    localStorage.setItem('rateLimitDuration', '60000'); // 60 seconds
  } catch (e) {
    // Storage access might be restricted
  }
  
  // Security: Override fetch to implement client-side rate limiting
  const originalFetch = window.fetch;
  let requestCount = 0;
  let requestWindow = Date.now();
  
  window.fetch = function(resource, options = {}) {
    const now = Date.now();
    
    // Reset counter every hour
    if (now - requestWindow > 3600000) {
      requestCount = 0;
      requestWindow = now;
    }
    
    // Check if we're approaching rate limit
    if (requestCount >= 90) { // 90% of 100 requests per hour
      console.warn('Approaching rate limit, request delayed');
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          requestCount++;
          originalFetch.apply(this, arguments).then(resolve).catch(reject);
        }, 1000); // Delay by 1 second
      });
    }
    
    requestCount++;
    return originalFetch.apply(this, arguments);
  };
  
  // Security: Prevent rapid form submissions
  let lastSubmission = 0;
  document.addEventListener('submit', (e) => {
    const now = Date.now();
    if (now - lastSubmission < 1000) { // Prevent submissions within 1 second
      e.preventDefault();
      console.warn('Form submission blocked - too frequent');
      return false;
    }
    lastSubmission = now;
  });
  
  // Security: Monitor and limit click events on buttons
  let lastClick = 0;
  document.addEventListener('click', (e) => {
    if (e.target.tagName === 'BUTTON' || e.target.closest('button')) {
      const now = Date.now();
      if (now - lastClick < 500) { // Prevent clicks within 500ms
        e.preventDefault();
        e.stopPropagation();
        return false;
      }
      lastClick = now;
    }
  });
  
  // Retry button functionality
  retryButton.addEventListener('click', () => {
    window.location.reload();
  });
</script>