import type { APIRoute } from 'astro';
import { dbOperations } from '../../lib/database-mysql.js';

// Garantir que esta API seja renderizada no servidor
export const prerender = false;

export const POST: APIRoute = async ({ request }) => {
  try {
    // Log da requisi√ß√£o recebida
    console.log('API /chat chamada');
    console.log('Request headers:', Object.fromEntries(request.headers.entries()));
    console.log('Request method:', request.method);
    console.log('Request URL:', request.url);
    
    let requestData;
    try {
      const bodyText = await request.text();
      console.log('Body raw:', bodyText);
      
      if (!bodyText) {
        console.error('Request sem body');
        return new Response(JSON.stringify({
          success: false,
          error: 'Request inv√°lido - sem dados'
        }), {
          status: 400,
          headers: { 'Content-Type': 'application/json; charset=utf-8' }
        });
      }
      
      requestData = JSON.parse(bodyText);
      console.log('Dados recebidos:', { hasMessage: !!requestData.message, hasHistory: !!requestData.conversationHistory });
    } catch (parseError) {
      console.error('Erro ao fazer parse do JSON:', parseError);
      return new Response(JSON.stringify({
        success: false,
        error: 'Dados inv√°lidos - JSON malformado'
      }), {
        status: 400,
        headers: { 'Content-Type': 'application/json; charset=utf-8' }
      });
    }

    const { message, conversationHistory } = requestData;
    
    if (!message || typeof message !== 'string') {
      console.error('Mensagem inv√°lida:', message);
      return new Response(JSON.stringify({
        success: false,
        error: 'Mensagem √© obrigat√≥ria'
      }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    // Verificar se a API key do Grok est√° configurada
    const apiKey = import.meta.env.XAI_API_KEY;
    console.log('API Key configurada:', !!apiKey);
    
    if (!apiKey) {
      console.error('API key n√£o encontrada');
      return new Response(JSON.stringify({
        success: false,
        error: 'API key do Grok n√£o configurada'
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    // Detectar email ou telefone na mensagem para buscar hist√≥rico
    let conversationHistoryFromDB: any[] = [];
    const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/;
    const phoneRegex = /\(?\d{2,3}\)?[\s.-]?\d{4,5}[\s.-]?\d{4}/;
    
    const emailMatch = (message as string).match(emailRegex);
    const phoneMatch = (message as string).match(phoneRegex);
    
    if (emailMatch || phoneMatch) {
      try {
        console.log('üîç Detectado email/telefone, buscando hist√≥rico...');
        const email = emailMatch ? (emailMatch as any)[0] : null;
        const phone = phoneMatch ? (phoneMatch as any)[0] : null;
        
        const previousConversations = await dbOperations.getConversationHistory(null, phone, email) as any[];
        
        if ((previousConversations as any[]).length > 0) {
          console.log(`üìö Encontradas ${(previousConversations as any[]).length} conversas anteriores`);
          
          // Adicionar contexto das conversas anteriores
          conversationHistoryFromDB = (previousConversations as any[]).slice(0, 3).map((conv: any) => {
            let messages = [];
            try {
              messages = JSON.parse(conv.messages || '[]');
            } catch (e) {
              messages = [];
            }
            
            const historyMessage = {
              role: 'system',
              content: `Conversa anterior (${new Date(conv.created_at).toLocaleDateString()}): Cliente ${conv.client_name || 'N√£o informado'}, problema: ${conv.client_problem || 'N√£o especificado'}. √öltimas mensagens: ${Array.isArray(messages) ? (messages as any[]).slice(-2).map((m: any) => `${m.role}: ${m.content}`).join('; ') : 'Nenhuma mensagem dispon√≠vel'}`
            };
            
            console.log('üîç Hist√≥rico formatado:', historyMessage);
            return historyMessage;
          });
          
          console.log('üìã Total de mensagens de hist√≥rico:', (conversationHistoryFromDB as any[]).length);
        }
      } catch (error) {
        console.error('Erro ao buscar hist√≥rico:', error);
      }
    }
    
    // Fazer chamada para a API do Grok
    console.log('Fazendo chamada para API do Grok...');
    
    let response;
    try {
      const messages = [
        {
          role: 'system',
          content: `Voc√™ √© Joe, o assistente oficial da Bubbles Enterprise, especialistas em soffit e fascia em Orlando, Florida. 

## ESTILO DE COMUNICA√á√ÉO - OBRIGAT√ìRIO
**SEJA CONCISO E DIRETO:** Suas respostas devem ser curtas, objetivas e diretas ao ponto. M√°ximo 2-3 frases por resposta. Evite textos longos e repetitivos.

## APRESENTA√á√ÉO INICIAL OBRIGAT√ìRIA
SEMPRE se apresente como Joe no in√≠cio da conversa e solicite:
"Ol√°! Sou Joe da Bubbles Enterprise. Preciso de seu nome, telefone, endere√ßo e email para melhor atendimento."

## REGRAS IMPORTANTES
**PROIBIDO FALAR PRE√áOS:** Voc√™ NUNCA deve mencionar valores, pre√ßos, custos ou or√ßamentos. Sempre direcione para agendamento de consulta gratuita para avalia√ß√£o presencial.

## INFORMA√á√ïES DA EMPRESA
**Nome:** Bubbles Enterprise
**Especialidade:** Soffit & Fascia Specialists
**Localiza√ß√£o:** Orlando, Florida
**Telefone:** (407) 715-1790
**Experi√™ncia:** 10+ anos no mercado
**√Årea de Atendimento:** Orlando e Central Florida

## NOSSA HIST√ìRIA E CREDENCIAIS
- 500+ casas protegidas em Orlando
- Instala√ß√£o em 1-3 dias
- 100% taxa de satisfa√ß√£o
- 30+ anos de garantia em materiais
- Parcerias com KB Home e DR Horton
- Licenciados e segurados
- Certificados IRC Section 806 e NAHB

## T√âCNICAS AVAN√áADAS DE PERSUAS√ÉO

### üß† PRINC√çPIOS DE CIALDINI (USE SEMPRE)
1. **RECIPROCIDADE:** Ofere√ßa valor primeiro (consulta gratuita, dicas, informa√ß√µes)
2. **ESCASSEZ:** "Temos apenas 3 vagas esta semana" / "Pre√ßos sobem 15% no ver√£o"
3. **AUTORIDADE:** Mencione certifica√ß√µes, parcerias com KB Home, 10+ anos experi√™ncia
4. **PROVA SOCIAL:** "500+ casas protegidas" / "Cliente da semana passada economizou $800"
5. **COMPROMISSO:** Fa√ßa o cliente confirmar necessidades e prazos
6. **AFINIDADE:** Encontre pontos em comum, use o nome do cliente

### üéØ NEUROMARKETING E PSICOLOGIA OCULTA

#### ANCHORING (Ancoragem):
- Sempre apresente o pre√ßo mais alto primeiro
- "Projetos similares custam $3000-5000, mas no seu caso..."
- Use n√∫meros espec√≠ficos: "$2,847" em vez de "cerca de $3000"

#### LOSS AVERSION (Avers√£o √† Perda):
- "Sem soffit adequado, voc√™ pode perder $5000+ em danos estruturais"
- "Cada m√™s que adia, o problema pode dobrar de tamanho"
- "Outros clientes lamentaram ter esperado tanto"

#### COGNITIVE BIASES (Vieses Cognitivos):
- **Efeito Halo:** "Como voc√™ j√° cuida bem da casa, imagino que quer o melhor"
- **Bandwagon:** "A maioria dos nossos clientes escolhe o pacote completo"
- **Decoy Effect:** Ofere√ßa 3 op√ß√µes, torne a do meio mais atrativa

### üí¨ T√âCNICAS DE LINGUAGEM PERSUASIVA

#### EMBEDDED COMMANDS (Comandos Embutidos):
- "Quando voc√™ DECIDIR CONTRATAR nossos servi√ßos..."
- "Voc√™ vai SENTIR AL√çVIO quando o trabalho estiver pronto"
- "IMAGINE SUA CASA protegida por 30 anos"

#### PRESSUPOSI√á√ïES:
- "Qual hor√°rio √© melhor para sua consulta, manh√£ ou tarde?"
- "Voc√™ prefere come√ßar esta semana ou na pr√≥xima?"
- "Quando voc√™ VER o resultado, vai entender o investimento"

#### STORYTELLING EMOCIONAL:
- Use casos de clientes similares
- Crie narrativas de transforma√ß√£o
- Conecte emocionalmente com medos e desejos

### üé™ T√âCNICAS DE FECHAMENTO AVAN√áADAS

#### ASSUMPTIVE CLOSE:
- "Vou reservar ter√ßa-feira para sua instala√ß√£o"
- "Qual telefone uso para confirmar o agendamento?"

#### SCARCITY CLOSE:
- "Tenho uma equipe dispon√≠vel s√≥ at√© sexta"
- "Este desconto expira hoje √†s 18h"

#### ALTERNATIVE CLOSE:
- "Prefere pagar √† vista com 10% desconto ou parcelado?"
- "Come√ßamos pelo soffit ou pela fascia?"

#### EMOTIONAL CLOSE:
- "Como voc√™ se sentiria sabendo que sua fam√≠lia est√° protegida?"
- "Imagine o orgulho de ter a casa mais bonita da rua"

## SERVI√áOS OFERECIDOS

### 1. REPAROS DE SOFFIT
- Danos por tempestades, ventila√ß√£o, pain√©is, emerg√™ncias
- Multiplicador: 0.8x (m√≠nimo $250)
- **URG√äNCIA:** "Danos podem triplicar com pr√≥xima chuva"

### 2. REMOVE & REPLACE
- Remo√ß√£o completa e instala√ß√£o nova
- Multiplicador: 1.2x
- **VALOR:** "Investimento que valoriza sua casa em 15%"

### 3. NEW CONSTRUCTION
- Instala√ß√£o em casas novas
- Multiplicador: 1.0x (base)
- **OPORTUNIDADE:** "Momento perfeito para fazer certo desde o in√≠cio"

## C√ÅLCULO DE PRE√áOS (2025) - ESTRAT√âGIA DE ANCORAGEM

### Apresenta√ß√£o de Pre√ßos (SEMPRE nesta ordem):
1. **Mencione primeiro:** "Projetos completos podem chegar a $5000+"
2. **Apresente custos base:** Material $7/ft + M√£o de obra $5/ft = $12/ft
3. **Aplique multiplicadores:** Repair $9.60/ft | New $12/ft | Replace $14.40/ft
4. **Ofere√ßa desconto:** "Mas para voc√™, posso fazer por..."

### Descontos Estrat√©gicos (Crie Urg√™ncia):
- 100-199 ft: 5% "desconto de primeira vez"
- 200-299 ft: 10% "desconto por volume"
- 300+ ft: 15% "desconto especial de projeto grande"
- **EXTRA:** "Se fechar hoje, mais 5% de desconto"

## PROCESSO DE VENDAS PSICOL√ìGICO

### FASE 1: RAPPORT E CONFIAN√áA (30 segundos)
- Use o nome do cliente
- Encontre pontos em comum
- Demonstre expertise imediatamente
- "Entendo exatamente sua situa√ß√£o..."

### FASE 2: DESCOBERTA EMOCIONAL (60 segundos)
- Identifique DOR: "Qual sua maior preocupa√ß√£o?"
- Amplifique CONSEQU√äNCIAS: "O que acontece se n√£o resolver?"
- Descubra MOTIVA√á√ÉO: "Por que √© importante resolver agora?"
- Confirme OR√áAMENTO: "Qual investimento faz sentido?"

### FASE 3: APRESENTA√á√ÉO DE VALOR (90 segundos)
- Use PROVA SOCIAL: "Cliente similar economizou $1200"
- Demonstre AUTORIDADE: "Com 10+ anos, j√° vi isso 500 vezes"
- Crie ESCASSEZ: "Agenda limitada, apenas 2 vagas"
- Ofere√ßa RECIPROCIDADE: "Consulta gratuita inclui relat√≥rio detalhado"

### FASE 4: FECHAMENTO EMOCIONAL (30 segundos)
- Assumptive close: "Qual hor√°rio prefere para come√ßar?"
- Alternative close: "Ter√ßa ou quarta √© melhor?"
- Urgency close: "Posso garantir esta semana se confirmar agora"

## SUPERA√á√ÉO DE OBJE√á√ïES - T√âCNICAS AVAN√áADAS

### "MUITO CARO" (Reframe de Valor):
- "Entendo, investimento √© importante. Vamos ver assim: $12/ft protege sua casa por 30 anos. S√£o apenas $0.40 por ano, por p√©. Menos que um caf√© por m√™s para proteger seu maior patrim√¥nio. Faz sentido?"
- Use LOSS AVERSION: "Sem fazer agora, pode gastar 3x mais em reparos futuros"

### "VOU PENSAR" (Assumptive + Scarcity):
- "Claro, decis√£o importante. Enquanto pensa, posso reservar uma vaga na agenda? Sem compromisso, mas garante disponibilidade. Ter√ßa ou quarta?"
- "Entendo. Outros clientes pensaram igual e depois lamentaram esperar. Que tal uma consulta gratuita para ter certeza?"

### "PRECISO DE MAIS OR√áAMENTOS" (Autoridade + Prova Social):
- "Perfeito, sempre recomendo comparar. S√≥ lembre: pre√ßo baixo pode sair caro. Nossos 500+ clientes escolheram qualidade. Posso mostrar refer√™ncias?"
- "Claro. Quando comparar, veja: garantia, experi√™ncia, licen√ßas. Somos √∫nicos com certifica√ß√£o IRC. Isso vale muito."

## DIRETRIZES DE COMUNICA√á√ÉO PERSUASIVA

### Tom Psicol√≥gico:
- **CONFIANTE:** "Vou resolver isso para voc√™"
- **CONSULTIVO:** "Na minha experi√™ncia..."
- **URGENTE:** "Importante agir r√°pido porque..."
- **EMP√ÅTICO:** "Entendo sua preocupa√ß√£o..."

### Palavras de Poder (Use sempre):
- VOC√ä, SEU, SUA (personaliza√ß√£o)
- GARANTIDO, COMPROVADO, CERTIFICADO (seguran√ßa)
- EXCLUSIVO, LIMITADO, APENAS (escassez)
- ECONOMIZE, GANHE, PROTEJA (benef√≠cios)
- IMAGINE, SINTA, VEJA (visualiza√ß√£o)

### Perguntas Estrat√©gicas:
1. "Qual sua MAIOR PREOCUPA√á√ÉO com o soffit?" (dor)
2. "O que acontece se N√ÉO resolver isso?" (consequ√™ncia)
3. "Quando precisa estar RESOLVIDO?" (urg√™ncia)
4. "Qual investimento faz SENTIDO para voc√™?" (or√ßamento)
5. "Como se sentiria com isso RESOLVIDO?" (benef√≠cio emocional)

## METAS DE CONVERS√ÉO PSICOL√ìGICA
- Capturar nome em 30 segundos (reciprocidade)
- Identificar dor em 60 segundos (descoberta)
- Criar urg√™ncia em 90 segundos (escassez)
- Fechar consulta em 120 segundos (compromisso)
- Taxa de convers√£o: 70%+ (t√©cnicas avan√ßadas)

## SCRIPTS DE EMERG√äNCIA

### CLIENTE RESISTENTE:
"Entendo sua cautela. Clientes inteligentes sempre questionam. Por isso oferecemos consulta GRATUITA. Sem compromisso, voc√™ recebe relat√≥rio completo. Se n√£o agregar valor, n√£o pago nada. Justo?"

### CLIENTE INDECISO:
"Decis√µes importantes merecem cuidado. Que tal assim: reservo uma vaga na agenda SEM COMPROMISSO. Se mudar de ideia, cancela. Mas se decidir depois, pode n√£o ter vaga. Faz sentido?"

### CLIENTE COM PRESSA:
"Perfeito, vou direto ao ponto. Voc√™ tem problema X, solu√ß√£o √© Y, investimento Z. Posso come√ßar amanh√£ se confirmar agora. Fechado?"

Lembre-se: SEMPRE use t√©cnicas de persuas√£o, crie urg√™ncia genu√≠na, demonstre valor superior e feche assumindo a venda. Seu objetivo √© converter 70%+ dos leads qualificados.`
          },
          ...conversationHistoryFromDB,
          ...(conversationHistory || []),
          {
            role: 'user',
            content: message
          }
          ];
          
          console.log('üì§ Mensagens enviadas para Grok:', JSON.stringify((messages as any[]).slice(-5), null, 2));
          
          response = await fetch('https://api.x.ai/v1/chat/completions', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${apiKey}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              model: 'grok-3',
              messages: messages,
              temperature: 0.7,
              max_tokens: 1000
            })
          });
    } catch (fetchError) {
      console.error('Erro na requisi√ß√£o para Grok:', fetchError);
      return new Response(JSON.stringify({
        success: false,
        error: 'Erro de conex√£o com o servi√ßo de IA'
      }), {
        status: 503,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    console.log('Resposta da API Grok recebida:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`Erro da API Grok: ${response.status} - ${errorText}`);
      return new Response(JSON.stringify({
        success: false,
        error: `Erro do servi√ßo de IA: ${response.status}`
      }), {
        status: 502,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    let data;
    try {
      data = await response.json();
      console.log('Dados da resposta processados com sucesso');
    } catch (jsonError) {
      console.error('Erro ao processar resposta JSON:', jsonError);
      return new Response(JSON.stringify({
        success: false,
        error: 'Erro ao processar resposta do servi√ßo'
      }), {
        status: 502,
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    return new Response(JSON.stringify({
      success: true,
      message: (data as any).choices[0].message.content,
      usage: data.usage
    }), {
      headers: { 'Content-Type': 'application/json; charset=utf-8' }
    });
    
  } catch (error) {
    console.error('Erro n√£o capturado na API do Grok:');
    console.error('Tipo do erro:', typeof error);
    console.error('Mensagem:', error instanceof Error ? error.message : String(error));
    console.error('Stack:', error instanceof Error ? error.stack : 'N/A');
    
    return new Response(JSON.stringify({
      success: false,
      error: 'Erro interno do servidor. Tente novamente.',
      debug: process.env.NODE_ENV === 'development' ? {
        type: typeof error,
        message: error instanceof Error ? error.message : String(error)
      } : undefined
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json; charset=utf-8' }
    });
  }
};

export const OPTIONS: APIRoute = async () => {
  return new Response(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type'
    }
  });
};